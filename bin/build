#!/bin/bash
#
# This script builds a release version of
# the software for each supported platform.
#############################################

usage()
{
    printf "Usage: `basename $0` [-adh] [debug|release]\n\n" 1>&2
    
    printf "      -a          Build this project for the Apple App Store.\n" 1>&2
    printf "      -c [path]   Path to cmake\n" 1>&2
    printf "      -C          Run cmake only, don't build the project.\n" 1>&2
    printf "      -d          Build the documentation for the project.\n" 1>&2
    printf "      -D          Build the Doxygen files for the project.\n" 1>&2
    printf "      -g          Force use of gcc\n" 1>&2
    printf "      -h          Show this help screen.\n" 1>&2
    printf "      -j [number] Number of build threads\n" 1>&2
    printf "      -p          Build packages/installers.\n" 1>&2
    printf "      -q [path]   Path to qmake\n" 1>&2
    printf "      -t          Build the unit tests\n" 1>&2
    printf "      -v          Verbose output from make\n\n" 1>&2
    
    printf "      debug       Build the project with debug flags.\n" 1>&2
    printf "      release     Build the project with release flags.\n" 1>&2
    printf "      profile     Build the porject with debug/profiling flags.\n" 1>&2
    printf "      installer   Build the project with release flags, and package it (same as -dp release).\n" 1>&2
    exit 1
}

function init_variables {

    BLACK="\e[00;30m"
    DARY_GRAY="\e[01;30m"
    RED="\e[00;31m"
    BRIGHT_RED="\e[01;31m"
    GREEN="\e[00;32m"
    BRIGHT_GREEN="\e[01;32m"
    BROWN="\e[00;33m"
    YELLOW="\e[01;33m"
    BLUE="\e[00;34m"
    BRIGHT_BLUE="\e[01;34m"
    PURPLE="\e[00;35m"
    LIGHT_PURPLE="\e[01;35m"
    CYAN="\e[00;36m"
    BRIGHT_CYAN="\e[01;36m"
    LIGHT_GRAY="\e[00;37m"
    WHITE="\e[01;37m"
    ENDCOLOR="\e[m"

    if [[ ! $CMAKE ]]; then    
        CMAKE=`which cmake`
    fi

    if [[ ! $QMAKE ]]; then
        QMAKE=`which qmake`
    fi

    QMAKE_VER=`$QMAKE --version | grep "Using Qt version" | awk '{ print $4 }'`

    if [[ $QMAKE_VER =~ 5.* ]]; then
        QMAKE=`which qmake-qt4`
    fi

    CMAKE_FLAGS="$CMAKE_FLAGS -DUNIT_TESTING=${BUILD_TESTS}"

    #Debug
    if [[ $BUILD_TYPE =~ [Dd][Ee][Bb][Uu][Gg] ]]; then
        BUILD_TYPE="Debug"
        BUILD_DIR="${BUILD_DIR}_debug"

        CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"
        CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"
        CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS} -g -fsanitize=address"

    #Release or Installer
    elif [[ $BUILD_TYPE =~ [Rr][Ee][Ll][Ee][Aa][Ss][Ee] || 
            $BUILD_TYPE =~ [Ii][Nn][Ss][Tt][Aa][Ll][Ll][Ee][Rr] ]]; then

        if [[ $BUILD_TYPE =~ [Ii][Nn][Ss][Tt][Aa][Ll][Ll][Ee][Rr] ]]; then
            PACKAGE="ON"
            DOCS="ON"
        fi

        BUILD_TYPE="Release"
        BUILD_DIR="${BUILD_DIR}_release"
        
        CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -O2"
        CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -O2"
        CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS} "

    #Profile
    elif [[ $BUILD_TYPE =~ [Pp][Rr][Oo][Ff][Ii][Ll][Ee] ]]; then
        BUILD_TYPE="Profile"
        BUILD_DIR="${BUILD_DIR}_profile"
        
	CMAKE_C_FLAGS="-pg" # ${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"
        CMAKE_CXX_FLAGS="-pg" #${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"
        CMAKE_EXE_LINKER_FLAGS="-pg" #${CMAKE_EXE_LINKER_FLAGS} -g -fsanitize=address"
    fi

    CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
    CPACK_FLAGS=""

    CC=`which clang`
    if [[ ! $CC || $USE_LLVM  == false ]]; then
        CC=`which gcc`
        USE_LLVM=false
    fi

    CXX=`which clang++`
    if [[ ! $CXX || $USE_LLVM == false ]]; then
        CXX=`which g++`
        USE_LLVM=false
    fi
    
    if [ $DOCS == "ON" ]; then
        JAVA_BIN=`which java`
        FOP=`which fop`
        XSLTPROC=`which xsltproc`
        
        if [ ! $JAVA_BIN ]; then
            printf "${RED}Error${ENDCOLOR}: ${WHITE}Java${ENDCOLOR} must be installed to build the documentation.\n"
        fi

        if [ ! $FOP ]; then
            printf "${RED}Error${ENDCOLOR}: ${WHITE}fop${ENDCOLOR} must be installed to build the documentation.\n"
        fi

        if [ ! $XSLTPROC ]; then
            printf "${RED}Error${ENDCOLOR}: ${WHITE}xsltproc${ENDCOLOR} must be installed to build the documentation.\n"
            printf "Also make sure the ${WHITE}docbook-xsl-ns${ENDCOLOR} style sheets are installed.\n"
        fi
        
        if [[ ! "$JAVA_BIN" || ! "$FOP" || ! "$XSLTPROC" ]]; then
            exit 1
        fi
    fi
    CMAKE_FLAGS="$CMAKE_FLAGS -DDOCS=$DOCS"

    if [ $DOXYGEN == "ON" ]; then
        GV_DOT=`which dot`
        
        if [ ! $GV_DOT ]; then
            printf "${RED}Error${ENDCOLOR}: ${WHITE}Graphviz/dot${ENDCOLOR} must be installed to build the doxygen files.\n"
        fi
        
        if [[ ! "$GV_DOT" ]]; then
            exit 1
        fi
    fi
    CMAKE_FLAGS="$CMAKE_FLAGS -DDOXYGEN=$DOXYGEN"
    
    if [ $APP_STORE == "ON" ]; then
        BUNDLE_ID="com.stitchworkssoftware.crochet-charts"
    else
        BUNDLE_ID="com.stitchworkssoftware.CrochetCharts"
    fi

    export CC CXX

    PLATFORM=`uname -s`
    ARCH=`uname -m`

    CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -W -Wall"
    CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -W -Wall"
    CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS} "
    
    if [ $PLATFORM == "Darwin" ]; then

        MACOSX_DEPLOYMENT_TARGET=10.6
        MACOSX_SDK="/Developer/SDKs/MacOSX10.6.sdk/"
        QMAKE="/usr/local/Trolltech/Qt-4.8.4/bin/qmake"

        CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_OSX_ARCHITECTURES=\"i386;x86_64\""
        CMAKE_FLAGS="$CMAKE_FLAGS -DQT_QMAKE_EXECUTABLE=$QMAKE"
        CMAKE_FLAGS="$CMAKE_FLAGS -DAPP_STORE=$APP_STORE"
        CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_OSX_DEPLOYMENT_TARGET=10.6"
        CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_OSX_SYSROOT=$MACOSX_SDK"
        CMAKE_FLAGS="$CMAKE_FLAGS -DBUNDLE_ID=$BUNDLE_ID"

    elif [ $PLATFORM == "Linux" ]; then

        CMAKE_MODULE_PATH="${QT_BASE_PATH}/lib/cmake"
        CMAKE_PREFIX_PATH="${QT_BASE_PATH}" 
        
        if [[ $ARCH == "i686" || $ARCH == "i386" ]]; then
            CMAKE_FLAGS="$CMAKE_FLAGS -DAMD64=OFF"
            
            CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -m32"
            CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -m32"
            CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS} -m elf_i386"
        else
            CMAKE_FLAGS="$CMAKE_FLAGS -DAMD64=ON"
            
        fi

        export CMAKE_MODULE_PATH CMAKE_PREFIX_PATH
        CMAKE_FLAGS="$CMAKE_FLAGS -DQT_QMAKE_EXECUTABLE=\"$QMAKE\""
    else
        echo "-- ERROR: unknown platform"
        exit 1
    fi

    if [[ $USE_LLVM == true ]]; then
        CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -g -gdwarf-2 -Qunused-arguments -fcolor-diagnostics"
        CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -g -gdwarf-2 -Qunused-arguments -fcolor-diagnostics"
        
	#clang is broken on Fedora - doesn't have compiler-rt installed
        CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS} -g -fsanitize=address"
    else
        CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -g -ggdb"
        CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -g -ggdb"
        CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS}"
    fi

#    CMAKE_FLAGS="${CMAKE_FLAGS} -DCMAKE_C_FLAGS=\"${CMAKE_C_FLAGS}\""
    CMAKE_FLAGS="${CMAKE_FLAGS} -DCMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS}\""
    CMAKE_FLAGS="${CMAKE_FLAGS} -DCMAKE_EXE_LINKER_FLAGS=\"${CMAKE_EXE_LINKER_FLAGS}\""
}

function generate_icons {

    INKSCAPE="`which inkscape 2> /dev/null`"

    if [ ! -x "$INKSCAPE" ]; then
        echo "Error: Could not find inkscape to convert the svg -> png" >&2
        exit 1
    fi

    SIZES="16 32 48 64 96 128 192 256 512 1024 2048"
    FILES="CrochetCharts stitchworks-pattern"

    mkdir -p "${BUILD_DIR}/icons/"

    for file in $FILES; do
        for size in $SIZES; do
            $INKSCAPE -z --export-width=$size --export-height=$size \
            --export-dpi=96 --export-area-page \
            -f "${PROJECT_DIR}/images/${file}.svg" \
            --export-png="${BUILD_DIR}/icons/${file}-${size}.png" > /dev/null
        done
    done

}

function display_vairiables {

    printf -- "${WHITE}-------------------------------------------------------\n"
    printf --         "--                                                   --\n"
    printf --         "--     P R O J E C T    B U I L D    S C R I P T     --\n"
    printf --         "--                                                   --\n"
    printf --         "-------------------------------------------------------${ENDCOLOR}\n\n"
    printf -- "-- Project:       ${BRIGHT_BLUE}$PROJECT_DIR${ENDCOLOR}\n"
    printf -- "-- Build Dir:     ${BRIGHT_BLUE}$BUILD_DIR${ENDCOLOR}\n\n"
        
    printf -- "${WHITE}-------------------------------------------------------\n"
    printf --         "--                   G E N E R A L                   --\n"
    printf --         "-------------------------------------------------------${ENDCOLOR}\n"
    printf -- "-- CMake:         ${GREEN}$CMAKE${ENDCOLOR}\n"
    printf -- "-- QMake:         ${GREEN}$QMAKE${ENDCOLOR}\n"
    printf -- "-- CC:            ${GREEN}$CC${ENDCOLOR}\n"
    printf -- "-- THREADS:       ${GREEN}$THREADS${ENDCOLOR}\n"
    printf -- "-- CXX:           ${GREEN}$CXX${ENDCOLOR}\n"
    printf -- "-- Platform:      ${GREEN}$PLATFORM${ENDCOLOR}\n"
    printf -- "-- Arch:          ${GREEN}$ARCH${ENDCOLOR}\n"
    printf -- "-- Use LLVM:      ${GREEN}$USE_LLVM${ENDCOLOR}\n"
    printf -- "-- CMake Flags:   ${GREEN}$CMAKE_FLAGS${ENDCOLOR}\n"
    printf -- "-- CPack Flags:   ${GREEN}$CPACK_FLAGS${ENDCOLOR}\n"
    printf -- "-- Build Tests:   ${GREEN}$BUILD_TESTS${ENDCOLOR}\n"
    
    if [ $PLATFORM == "Darwin" ]; then
        printf -- "${WHITE}-------------------------------------------------------\n"
        printf --         "--             M A C   A P P   S T O R E             --\n"
        printf --         "-------------------------------------------------------${ENDCOLOR}\n"
        printf -- "-- App Store:     ${GREEN}$APP_STORE${ENDCOLOR}\n"
        printf -- "-- Bundle ID:     ${GREEN}$BUNDLE_ID${ENDCOLOR}\n"
    fi
    
    if [ $DOCS == "ON" ]; then
        printf -- "${WHITE}-------------------------------------------------------\n"
        printf --         "--             D O C U M E N T A T I O N             --\n"
        printf --         "-------------------------------------------------------${ENDCOLOR}\n"
        printf -- "-- Java:          ${GREEN}$JAVA_BIN${ENDCOLOR}\n"
        printf -- "-- fop:           ${GREEN}$FOP${ENDCOLOR}\n"
        printf -- "-- xsltproc:      ${GREEN}$XSLTPROC${ENDCOLOR}\n"
    fi
    
    if [ $DOXYGEN == "ON" ]; then
        printf -- "${WHITE}-------------------------------------------------------\n"
        printf --         "--                   D O X Y G E N                   --\n"
        printf --         "-------------------------------------------------------${ENDCOLOR}\n"
        printf -- "-- Graphviz/dot:  ${GREEN}$GV_DOT${ENDCOLOR}\n"
    fi
}

PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

APP_STORE="OFF"
DOCS="OFF"
BUILD_TESTS="OFF"
DOXYGEN="OFF"
USE_LLVM=true
PACKAGE="OFF"
CMAKE_ONLY=false
VERBOSE=""
THREADS=8

while getopts ":ac:CdDghj:pq:tv" opt; do
  case $opt in
    a)
      #-a is for Apple App Store
      APP_STORE="ON"
      ;;
    C)
      CMAKE_ONLY=true
      ;;
    d)
      #-d is for DOCS
      DOCS="ON"
      ;;
    D)
      DOXYGEN="ON"
      ;;
    g)
      USE_LLVM=false
      ;;
    h)
      usage
      ;;
    j)
      THREADS=$OPTARG
      ;;
    p)
      PACKAGE="ON"
      ;;
    c)
      CMAKE="$OPTARG"
      ;;
    q)
      QMAKE="$OPTARG"
      ;;
    t)
      BUILD_TESTS="ON"
      ;;
    v)
      VERBOSE="VERBOSE=1"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

#get aditional arguments.
shift $(($OPTIND - 1))

BUILD_TYPE=$1
BUILD_DIR="${PROJECT_DIR}/build"

if [ -z "$1" ]; then
    printf -- "${RED}Error${ENDCOLOR}: Please specify the build type (debug or release).\n\n"
    usage
    exit 1
fi

init_variables

display_vairiables

mkdir -p "${BUILD_DIR}"
cd "${BUILD_DIR}"

eval $CMAKE ${CMAKE_FLAGS} ${PROJECT_DIR}

if [ $CMAKE_ONLY == true ]; then
    exit 1
fi

make $VERBOSE -j $THREADS

if [[ $BUILD_TYPE == "Installer" || $PACKAGE == "ON" ]]; then
    generate_icons
    # cpack ${CPACK_FLAGS}
fi
